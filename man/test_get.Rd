% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/test.R
\name{test_get}
\alias{test_get}
\alias{test_get_true_positives}
\alias{test_get_false_positives}
\alias{test_get_actual_positives}
\alias{test_get_predicted_positives}
\alias{test_get_true_negatives}
\alias{test_get_false_negatives}
\alias{test_get_actual_negatives}
\alias{test_get_predicted_negatives}
\alias{test_get_sensitivity}
\alias{test_get_specificity}
\alias{test_get_prevalence}
\alias{test_get_positive_predictive_value}
\alias{test_get_negative_predictive_value}
\alias{test_get_metrics}
\alias{test_get_relation}
\title{Work with test results vs. actual conditions.}
\usage{
test_get_true_positives(data, pred_cond, act_cond, pred_cond_targ = TRUE,
  act_cond_targ = TRUE)

test_get_false_positives(data, pred_cond, act_cond,
  pred_cond_targ = TRUE, act_cond_targ = TRUE)

test_get_actual_positives(data, pred_cond, act_cond,
  pred_cond_targ = TRUE, act_cond_targ = TRUE)

test_get_predicted_positives(data, pred_cond, act_cond,
  pred_cond_targ = TRUE, act_cond_targ = TRUE)

test_get_true_negatives(data, pred_cond, act_cond, pred_cond_targ = TRUE,
  act_cond_targ = TRUE)

test_get_false_negatives(data, pred_cond, act_cond,
  pred_cond_targ = TRUE, act_cond_targ = TRUE)

test_get_actual_negatives(data, pred_cond, act_cond,
  pred_cond_targ = TRUE, act_cond_targ = TRUE)

test_get_predicted_negatives(data, pred_cond, act_cond,
  pred_cond_targ = TRUE, act_cond_targ = TRUE)

test_get_sensitivity(data, pred_cond, act_cond, pred_cond_targ = TRUE,
  act_cond_targ = TRUE)

test_get_specificity(data, pred_cond, act_cond, pred_cond_targ = TRUE,
  act_cond_targ = TRUE)

test_get_prevalence(data, pred_cond, act_cond, pred_cond_targ = TRUE,
  act_cond_targ = TRUE)

test_get_positive_predictive_value(data, pred_cond, act_cond,
  pred_cond_targ = TRUE, act_cond_targ = TRUE, prevalence = NULL)

test_get_negative_predictive_value(data, pred_cond, act_cond,
  pred_cond_targ = TRUE, act_cond_targ = TRUE, prevalence = NULL)

test_get_metrics(data, pred_cond, act_cond, pred_cond_targ = TRUE,
  act_cond_targ = TRUE, prevalence = NULL)

test_get_relation(data, pred_cond, act_cond, pred_cond_targ = TRUE,
  act_cond_targ = TRUE, alpha = eenv_alpha)
}
\arguments{
\item{data}{A tibble holding the data}

\item{pred_cond}{The column holding the predicted conditions / test results.}

\item{act_cond}{The column holding the true conditions.}

\item{pred_cond_targ}{The value that signifies the targeted predicted condition.}

\item{act_cond_targ}{The value that signifies the targeted true condition.}

\item{prevalence}{The prevalence in the reference population.}

\item{alpha}{The alpha level.}
}
\value{
variable
}
\description{
Functions to retrieve true positives, prevalence, npv...

Structure: Suppose you designed a test to predict if a person lied. Your
tibble might look like this:

|   | test_result | person_lied | comment           |
|---|-------------|-------------|-------------------|
| 1 | pos         | yes         | <- true positive  |
| 2 | pos         | no          | <- false positive |
| 3 | neg         | no          | <- true negative  |
| 4 | pos         | yes         | ...               |
| 5 | neg         | no          | ...               |

Your predicted condition (\code{pred_cond}) would be \code{test_result} and the
targeted condition (\code{pred_cond_targ}) would be \code{pos}. The actual condition
(\code{act_cond}) would be \code{person_lied} with targeted condition
(\code{act_cond_targ}) \code{yes}.
}
